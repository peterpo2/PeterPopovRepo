@inject AuthManager authManager;
@using Gaming_Forum.Models;

@model PaginatedList<Post>

<h2 style="color: black; font-weight: bold;">Posts</h2>

<p>
    <a asp-controller="Posts" asp-action="Create" class="btn btn-dark">Create a new post</a>
</p>
<p class="text-dark">Find a post by title or content:</p>

<form asp-controller="Posts" asp-action="Index" method="get">
    <input type="text" name="Query" placeholder="Search by keyword..." />
    <button class="btn btn-dark" type="submit">Search</button>
</form>
<br />

@if (Model.Count() == 0)
{
    <p class="text-dark">No Posts 😔</p>
}
else
{
    <div class="table-responsive">
        <table class="table table-striped table-bordered table-dark">

            <thead class="table-dark">
                <tr>
                    <th class="w-50">
                        @{
                            string titleSortBy = Context.Request.Query["sortBy"];
                            string newTitleSortBy = (titleSortBy == "title_asc") ? "title_desc" : (titleSortBy == "title_desc") ? "none" : "title_asc";
                        }
                        <a asp-controller="Posts" asp-action="Index" asp-route-Query="@Context.Request.Query["Query"]" asp-route-SortBy="@newTitleSortBy" class="table-link text-white fw-bold">
                            Title
                        </a>
                    </th>
                    <th class="align-middle text-center">
                        @{
                            string likesSortBy = Context.Request.Query["sortBy"];
                            string newLikesSortBy = (likesSortBy == "likes_desc") ? "likes_asc" : (likesSortBy == "likes_asc") ? "none" : "likes_desc";
                        }
                        <a asp-controller="Posts" asp-action="Index" asp-route-Query="@Context.Request.Query["Query"]" asp-route-SortBy="@newLikesSortBy" class="table-link text-white fw-bold">
                            Likes
                        </a>
                    </th>
                    <th class="w-auto align-middle text-center">
                        @{
                            string createdBySortBy = Context.Request.Query["sortBy"];
                            string newCreatedBySortBy = (createdBySortBy == "createdBy_asc") ? "createdBy_desc" : (createdBySortBy == "createdBy_desc") ? "none" : "createdBy_asc";
                        }
                        <a asp-controller="Posts" asp-action="Index" asp-route-Query="@Context.Request.Query["Query"]" asp-route-SortBy="@newCreatedBySortBy" class="table-link text-white fw-bold">
                            CreatedBy
                        </a>
                    </th>
                    <th class="w-14 align-middle text-center">
                        @{
                            string DateSortBy = Context.Request.Query["sortBy"];
                            string newDateSortBy = (DateSortBy == "date_desc") ? "date_asc" : (DateSortBy == "date_asc") ? "none" : "date_desc";
                        }
                        <a asp-controller="Posts" asp-action="Index" asp-route-Query="@Context.Request.Query["Query"]" asp-route-SortBy="@newDateSortBy" class="table-link text-white fw-bold">
                            Date created
                        </a>
                    </th>
                    @if (authManager.CurrentUser != null)
                    {
                        <th class="w-14 align-middle text-center">Actions</th>
                    }
                </tr>
            </thead>

            <tbody>
                @foreach (var post in Model)
                {
                    @if (post.IsDeleted == false)
                    {
                        <tr>
                            <td>
                                <div class="panel-group" id="accordion">
                                    <div class="panel panel-default">
                                        <div class="panel-heading">
                                            <h5 class="panel-title">
                                                <a asp-controller="Posts" asp-action="Details" asp-route-id="@post.Id" style="font-weight: bold; color: darkseagreen;">@post.Title</a>
                                            </h5>
                                        </div>
                                        <div>
                                            <div class="panel-body col-sm-9">@post.Content</div>
                                        </div>
                                    </div>
                                </div>
                            </td>
                            <td class="align-middle text-center">
                                @post.Likes.Where(l => l.IsDeleted == false).Count()
                                <a asp-controller="Posts" asp-action="Like" asp-route-id="@post.Id" class="btn btn-info" style="background-color: darkseagreen;">Like</a>
                            </td>
                            <td class="align-middle text-center">@post.User.Username</td>
                            <td class="align-middle text-center">@post.DateCreated</td>
                            @if (authManager.CurrentUser != null)
                            {
                                <td class="align-middle text-center">
                                    @if (authManager.CurrentUser.Username == post.User.Username || authManager.CurrentUser.IsAdmin)
                                    {
                                        <a asp-controller="Posts" asp-action="Edit" asp-route-id="@post.Id" class="btn btn-warning">Edit</a>
                                        <a asp-controller="Posts" asp-action="Delete" asp-route-id="@post.Id" class="btn btn-danger">Delete</a>
                                    }
                                    else
                                    {
                                        <button class="btn btn-warning" disabled>Edit</button>
                                        <button class="btn btn-danger" disabled>Delete</button>
                                    }
                                </td>
                            }
                        </tr>
                    }
                }

            </tbody>
        </table>
    </div>
}

@{
    string prevButtonState = Model.HasPrevPage ? "" : "disabled";
    string nextButtonState = Model.HasNextPage ? "" : "disabled";
}

<nav aria-label="Users Pagination">
    <ul class="pagination justify-content-center">
        @if (Model.HasPrevPage)
        {
            <li class="page-item @prevButtonState">
                <a class="page-link text-black" href="@Url.Action("Index", new { query = ViewData["CurrentQuery"], sortBy = Context.Request.Query["sortBy"], pageNumber = Model.PageNumber - 1 })">Previous</a>
            </li>
        }
        @for (int i = 1; i <= Model.TotalPages; i++)
        {
            <li class="page-item @(Model.PageNumber == i ? "active" : "")">
                <a class="page-link text-black" href="@Url.Action("Index", new { query = ViewData["CurrentQuery"], sortBy = Context.Request.Query["sortBy"], pageNumber = i })">@i</a>
            </li>
        }
        @if (Model.HasNextPage)
        {
            <li class="page-item @nextButtonState">
                <a class="page-link text-black" href="@Url.Action("Index", new { query = ViewData["CurrentQuery"], sortBy = Context.Request.Query["sortBy"], pageNumber = Model.PageNumber + 1 })">Next</a>
            </li>
        }
    </ul>
</nav>


